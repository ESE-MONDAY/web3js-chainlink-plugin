"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainlinkPlugin = void 0;
const web3_1 = require("web3");
const aggregator_v3_interface_abi_1 = require("./aggregator_v3_interface_abi");
class ChainlinkPlugin extends web3_1.Web3PluginBase {
    constructor(options) {
        super();
        this.pluginNamespace = options?.pluginNamespace ?? 'chainlink';
        this.defaultAggregatorInterfaceAbi =
            options?.defaultAggregatorInterfaceAbi ?? aggregator_v3_interface_abi_1.AggregatorV3InterfaceABI;
    }
    async getPrice(priceFeedAddress, aggregatorInterfaceAbi = this.defaultAggregatorInterfaceAbi) {
        if (!web3_1.validator.isAddress(priceFeedAddress)) {
            throw new Error(`Provided priceFeedAddress is not a valid address: ${priceFeedAddress}`);
        }
        const _contract = new web3_1.Contract(aggregatorInterfaceAbi, priceFeedAddress);
        _contract.link(this);
        if (_contract.methods.latestRoundData !== undefined) {
            return _contract.methods.latestRoundData().call();
        }
        throw new Error('Unable to get price, provided aggregatorInterfaceAbi is missing latestRoundData method');
    }
}
exports.ChainlinkPlugin = ChainlinkPlugin;
//# sourceMappingURL=chainlink_plugin.js.map